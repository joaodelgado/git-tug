#!/bin/sh

# Colors
NC='\033[0m'        # Text Reset
BLACK='\033[0;30m'  # Black
RED='\033[0;31m'    # Red
GREEN='\033[0;32m'  # Green
YELLOW='\033[0;33m' # Yellow
BLUE='\033[0;34m'   # Blue
PURPLE='\033[0;35m' # Purple
CYAN='\033[0;36m'   # Cyan
WHITE='\033[0;37m'  # White

# Exit if any command fails

if [ "$DEBUG" = "yes" ]
then
    set -x
fi

usage() {
    echo "usage: git tug"
    echo
    echo "Pull every local branch"
    echo "[-h | --help] -- print this message"
}

pull_branch() {
    BRANCH=$1
    CURRENT_BRANCH=$(git rev-parse --abbrev-ref @)

    echo "Pulling $BRANCH"

    git checkout $BRANCH > /dev/null || exit 1
    git pull --rebase > /dev/null || exit 1
    git checkout $CURRENT_BRANCH > /dev/null || exit 1
}

check_branch() {
    LOCAL=$1
    UPSTREAM=$(git rev-parse --abbrev-ref ${LOCAL}@{u} 2> /dev/null)

    if [ -z $UPSTREAM ]
    then
        # No upstream set. Do nothing
        return
    fi

    if [ $UPSTREAM == "$LOCAL@{u}" ]
    then
        # Upstream is gone
        echo -e "${LIGHT_GRAY}$LOCAL - gone${NC}"
        return
    fi

    LOCAL_REV=$(git rev-parse $LOCAL)
    REMOTE_REV=$(git rev-parse $UPSTREAM)
    BASE_REV=$(git merge-base $LOCAL_REV $UPSTREAM)

    if [ $LOCAL_REV == $REMOTE_REV ]
    then
        echo -e "${GREEN}$LOCAL - up-to-date${NC}"
    elif [ $LOCAL_REV == $BASE_REV ]
    then
        echo -e "${YELLOW}$LOCAL - behind${NC}"
        pull_branch $LOCAL
    elif [ $REMOTE_REV == $BASE_REV ]
    then
        echo -e "${YELLOW}$LOCAL - ahead${NC}"
    else
        echo -e "${RED}$LOCAL - diverged${RED}"
    fi
}

main() {
    # Read parameters
    while [ "$#" -gt 0 ]
    do
        case "$1" in
            -h | --help )
                shift
                usage
                exit 0
                ;;
            *)
                break
                ;;
        esac
    done

    git stash list | grep -- '--- git-tug ---' > /dev/null
    if [ $? -eq 0 ]
    then
        echo "A previous git-tug execution exited with an error."
        echo "Resolve any problems first and remove the '--- git-tug ---' stash entry."
        exit 1
    fi

    # Fetch remote
    echo "Fetching from remote repository" && git fetch || exit 2

    if [[ $(git status -s) ]]
    then
        echo "Stashing local changes" && git stash save -u -- "--- git-tug ---" > /dev/null || exit 2
    fi

    for branch in $(git for-each-ref --format='%(refname:short)' refs/heads/)
    do
        check_branch $branch
    done

    git stash list | grep -- '--- git-tug ---' > /dev/null
    if [ $? -eq 0 ]
    then
        echo "Reaplying local changes" && git stash pop > /dev/null || exit 2
    fi
}

main $@
